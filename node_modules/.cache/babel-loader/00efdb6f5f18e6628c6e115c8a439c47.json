{"ast":null,"code":"var _jsxFileName = \"/Users/theodaguier/Portfolio/src/Components/Folders/Folder/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst folders = [{\n  id: 1,\n  name: 'Compétences',\n  img: './Icons/folder.png'\n}, {\n  id: 2,\n  name: 'Formations',\n  img: './Icons/folder.png'\n}];\nexport const AllFolders = () => {\n  _s();\n\n  // this state is used to store the INDEX of the card that is currently expanded\n  const [expandedCard, setExpandedCard] = useState(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: folders.map((folder, index) => /*#__PURE__*/_jsxDEV(Folder, {\n      folder: folder,\n      // this prop passes the boolean value of whether the card is expanded or not\n      isExpanded: expandedCard === index // this prop receives the index of the card that is expanded and sets the state\n      ,\n      expandedCard: () => setExpandedCard(index)\n    }, folder.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllFolders, \"ou8t+V0qTjLIVELAtXpDVfsXnRA=\");\n\n_c = AllFolders;\n\nfunction Folder(_ref) {\n  let {\n    folder,\n    isExpanded,\n    expandedCard,\n    isActive,\n    setActive\n  } = _ref;\n\n  const toggleClass = () => {\n    setActive(!isActive);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-content\",\n      onClick: toggleClass,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-icon\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"i-folder\",\n          src: folder.img,\n          alt: \"folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-name\",\n        children: folder.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, folder.index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Folder;\nexport default Folder;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AllFolders\");\n$RefreshReg$(_c2, \"Folder\");","map":{"version":3,"names":["React","useState","folders","id","name","img","AllFolders","expandedCard","setExpandedCard","map","folder","index","Folder","isExpanded","isActive","setActive","toggleClass"],"sources":["/Users/theodaguier/Portfolio/src/Components/Folders/Folder/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../index.css';\n\nconst folders = [\n  { id: 1, name: 'Compétences', img: './Icons/folder.png' },\n  { id: 2, name: 'Formations', img: './Icons/folder.png' },\n];\n\nexport const AllFolders = () => {\n  // this state is used to store the INDEX of the card that is currently expanded\n  const [expandedCard, setExpandedCard] = useState(null);\n\n  return (\n    <div>\n      {folders.map((folder, index) => (\n        <Folder\n          folder={folder}\n          key={folder.id}\n          // this prop passes the boolean value of whether the card is expanded or not\n          isExpanded={expandedCard === index}\n          // this prop receives the index of the card that is expanded and sets the state\n          expandedCard={() => setExpandedCard(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nfunction Folder({ folder, isExpanded, expandedCard, isActive, setActive }) {\n  const toggleClass = () => {\n    setActive(!isActive);\n  };\n\n  return (\n    <div className=\"folder\" key={folder.index}>\n      <div className=\"folder-content\" onClick={toggleClass}>\n        <div className=\"folder-icon\">\n          <img className=\"i-folder\" src={folder.img} alt=\"folder\" />\n        </div>\n        <div className=\"folder-name\">{folder.name}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Folder;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,cAAP;;AAEA,MAAMC,OAAO,GAAG,CACd;EAAEC,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE,aAAf;EAA8BC,GAAG,EAAE;AAAnC,CADc,EAEd;EAAEF,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE,YAAf;EAA6BC,GAAG,EAAE;AAAlC,CAFc,CAAhB;AAKA,OAAO,MAAMC,UAAU,GAAG,MAAM;EAAA;;EAC9B;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,IAAD,CAAhD;EAEA,oBACE;IAAA,UACGC,OAAO,CAACO,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,kBACX,QAAC,MAAD;MACE,MAAM,EAAED,MADV;MAGE;MACA,UAAU,EAAEH,YAAY,KAAKI,KAJ/B,CAKE;MALF;MAME,YAAY,EAAE,MAAMH,eAAe,CAACG,KAAD;IANrC,GAEOD,MAAM,CAACP,EAFd;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CAlBM;;GAAMG,U;;KAAAA,U;;AAoBb,SAASM,MAAT,OAA2E;EAAA,IAA3D;IAAEF,MAAF;IAAUG,UAAV;IAAsBN,YAAtB;IAAoCO,QAApC;IAA8CC;EAA9C,CAA2D;;EACzE,MAAMC,WAAW,GAAG,MAAM;IACxBD,SAAS,CAAC,CAACD,QAAF,CAAT;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAC,QAAf;IAAA,uBACE;MAAK,SAAS,EAAC,gBAAf;MAAgC,OAAO,EAAEE,WAAzC;MAAA,wBACE;QAAK,SAAS,EAAC,aAAf;QAAA,uBACE;UAAK,SAAS,EAAC,UAAf;UAA0B,GAAG,EAAEN,MAAM,CAACL,GAAtC;UAA2C,GAAG,EAAC;QAA/C;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,eAIE;QAAK,SAAS,EAAC,aAAf;QAAA,UAA8BK,MAAM,CAACN;MAArC;QAAA;QAAA;QAAA;MAAA,QAJF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,GAA6BM,MAAM,CAACC,KAApC;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;MAfQC,M;AAiBT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}